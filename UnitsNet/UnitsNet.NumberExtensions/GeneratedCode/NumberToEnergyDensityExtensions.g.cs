//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToEnergyDensity
{
    /// <summary>
    /// A number to EnergyDensity Extensions
    /// </summary>
    public static class NumberToEnergyDensityExtensions
    {
        /// <inheritdoc cref="EnergyDensity.FromGigajoulesPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity GigajoulesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromGigajoulesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromGigawattHoursPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity GigawattHoursPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromGigawattHoursPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromJoulesPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity JoulesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromJoulesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromKilojoulesPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity KilojoulesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromKilojoulesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromKilowattHoursPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity KilowattHoursPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromKilowattHoursPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromMegajoulesPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity MegajoulesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromMegajoulesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromMegawattHoursPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity MegawattHoursPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromMegawattHoursPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromPetajoulesPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity PetajoulesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromPetajoulesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromPetawattHoursPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity PetawattHoursPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromPetawattHoursPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromTerajoulesPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity TerajoulesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromTerajoulesPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromTerawattHoursPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity TerawattHoursPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromTerawattHoursPerCubicMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="EnergyDensity.FromWattHoursPerCubicMeter(UnitsNet.QuantityValue)" />
        public static EnergyDensity WattHoursPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => EnergyDensity.FromWattHoursPerCubicMeter(Convert.ToDouble(value));

    }
}
