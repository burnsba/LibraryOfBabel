//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAbsorbedDoseOfIonizingRadiation
{
    /// <summary>
    /// A number to AbsorbedDoseOfIonizingRadiation Extensions
    /// </summary>
    public static class NumberToAbsorbedDoseOfIonizingRadiationExtensions
    {
        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromCentigrays(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Centigrays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromCentigrays(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromFemtograys(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Femtograys<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromFemtograys(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromGigagrays(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Gigagrays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromGigagrays(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromGrays(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Grays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromGrays(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromKilograys(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Kilograys<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromKilograys(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromKilorads(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Kilorads<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromKilorads(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMegagrays(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Megagrays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromMegagrays(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMegarads(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Megarads<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromMegarads(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMicrograys(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Micrograys<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromMicrograys(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMilligrays(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Milligrays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromMilligrays(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMillirads(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Millirads<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromMillirads(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromNanograys(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Nanograys<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromNanograys(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromPetagrays(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Petagrays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromPetagrays(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromPicograys(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Picograys<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromPicograys(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromRads(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Rads<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromRads(Convert.ToDouble(value));

        /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromTeragrays(UnitsNet.QuantityValue)" />
        public static AbsorbedDoseOfIonizingRadiation Teragrays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => AbsorbedDoseOfIonizingRadiation.FromTeragrays(Convert.ToDouble(value));

    }
}
